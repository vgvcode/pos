#!/usr/bin/python
from __future__ import print_function # Python 2/3 compatibility
from decimal import *
import ordersmodule
import catalogmodule
import commonmodule
import sys
import time
from boto3.dynamodb.conditions import Key, Attr
import sqsmodule
import random
import json

#Initialization
posId = 'PosGNChettyRoadCafe'
catId = 'SRC_CAT100'
ep = "http://localhost:8000"
remoteEp = "https://dynamodb.us-east-1.amazonaws.com"

#Copy remote catalog to local
lCat = catalogmodule.Catalog(catId)

if lCat.copyFromRemote(remoteEp) == False:
    print("Remote copy failed")
    SystemExit()
    
print('Copied remote catalog to local')

items = lCat.getItems()
print(items)

n = input("New order (y/n):")
if n == 'n':
    sys.exit(0)

i = input("Item code: (0 to exit):")

    



"""
ct = catalogmodule.CatalogTable()
ct.deleteAllItems(catId)
"""

"""
for i in range(1,2):
    print('Placing order number:{}'.format(i))
    o = ordersmodule.Order(posId)
    
    numItems = int(random.random() * 9 + 1)
    print("Number of items:{}".format(numItems))
    for j in range(1, numItems+1):
        itemNumStr = str(100 + int(random.random() * 10))
        itemQty = int(random.random() * 19 + 1)
        o.addItem(items[itemNumStr], itemQty)
        
    o.writeToFile("orders.txt")
     
    if o.saveToDB() == True:
        print("Order saved successfully")
    else:
        print("Order not saved")

    time.sleep(10)
        
    o.addItem(items['105'], 105)
    if o.updateToDB() == True:
        print("Order updated successfully")
    else:
        print("Order not updated")
    
    del o

ot = ordersmodule.OrderTable()
ot.deQueueOrdersToRemote('insert', remoteEp)
print('Dequeued all insert orders to remote DB')

time.sleep(10)
ot = ordersmodule.OrderTable()
ot.deQueueOrdersToRemote('update', remoteEp)
print('Dequeued all update orders to remote DB')
"""

"""
o = ordersmodule.Order(posId)
orderId = "2c5f7858-9ef6-11e6-ab7c-9801a7a7a649"
o.fetchFromDB(orderId)
o.print()
o.deleteFromDB()

time.sleep(10)
ot = ordersmodule.OrderTable()
ot.deQueueOrdersToRemote('delete', remoteEp)
print('Dequeued all delete orders to remote DB')

numSeconds = 600
r = commonmodule.getOrdersMadeInXSeconds(posId, numSeconds)
listOfOrders = r['Items']
listOfOrdersByTime = sorted(listOfOrders, key=lambda order: order['Info']['CreatedTicks'])
print('Number of orders made in the last {} seconds: {}'.format(numSeconds, len(r['Items'])))
for oDict in listOfOrdersByTime:
    oObj = ordersmodule.Order(posId)
    oObj.fromDictionary(oDict)
    print("New Order:")
    oObj.print()
"""